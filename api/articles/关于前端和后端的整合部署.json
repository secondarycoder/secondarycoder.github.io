{"title":"关于前端和后端的整合部署","slug":"关于前端和后端的整合部署","date":"2019-06-24T08:48:34.000Z","updated":"2019-06-24T08:48:34.252Z","comments":true,"excerpt":"","content":"<h1 id=\"关于前端和后端的整合部署\"><a href=\"#关于前端和后端的整合部署\" class=\"headerlink\" title=\"关于前端和后端的整合部署\"></a>关于前端和后端的整合部署</h1><blockquote>\n<p>前后端分离开发已是主流，但是开发之后如何上线是一个问题   </p>\n</blockquote>\n<h2 id=\"前后端分离部署\"><a href=\"#前后端分离部署\" class=\"headerlink\" title=\"前后端分离部署\"></a>前后端分离部署</h2><ol>\n<li>前端进行<code>run build</code>生成静态文件，然后使用nginx代理，并将/api的路径代理到后端端口上。</li>\n<li>后端springboot项目进行<code>build artifact</code> <code>maven -clean</code> <code>maven -package</code>将项目打包成一个jar文件，然后在java环境下运行<code>java -jar xxxx.jar</code></li>\n</ol>\n<h2 id=\"前端整合进springboot项目\"><a href=\"#前端整合进springboot项目\" class=\"headerlink\" title=\"前端整合进springboot项目\"></a>前端整合进springboot项目</h2><ol>\n<li>将前端文件打包生成的静态文件放到springboot项目的resource-&gt;static文件夹下</li>\n<li>后端做自定义静态资源映射，修改application.yml文件<br><code>`</code>yaml<br>spring:<br> mvc:<pre><code> static-path-pattern: /**\n</code></pre> resources:<pre><code> static-locations: classpath:/static/\n</code></pre></li>\n</ol>\n<p><code>`</code></p>\n<ol start=\"3\">\n<li>后端打包成jar文件，运行</li>\n</ol>\n","categories":[],"tags":[{"name":"前端","path":"api/tags/前端.json"},{"name":"springboot","path":"api/tags/springboot.json"},{"name":"后端","path":"api/tags/后端.json"}]}