{"title":"springboot","slug":"2019030501","date":"2019-03-05T13:37:53.000Z","updated":"2019-03-05T13:38:28.000Z","comments":true,"excerpt":"","content":"<h1 id=\"0-学习目标\"><a href=\"#0-学习目标\" class=\"headerlink\" title=\"0.学习目标\"></a>0.学习目标</h1><ul>\n<li>了解SpringBoot的作用</li>\n<li>掌握java配置的方式</li>\n<li>了解SpringBoot自动配置原理</li>\n<li>掌握SpringBoot的基本使用</li>\n<li>了解Thymeleaf的基本使用</li>\n</ul>\n<h1 id=\"1-了解SpringBoot\"><a href=\"#1-了解SpringBoot\" class=\"headerlink\" title=\"1. 了解SpringBoot\"></a>1. 了解SpringBoot</h1><p>在这一部分，我们主要了解以下3个问题：</p>\n<ul>\n<li>什么是SpringBoot</li>\n<li>为什么要学习SpringBoot</li>\n<li>SpringBoot的特点</li>\n</ul>\n<h2 id=\"1-1-什么是SpringBoot\"><a href=\"#1-1-什么是SpringBoot\" class=\"headerlink\" title=\"1.1.什么是SpringBoot\"></a>1.1.什么是SpringBoot</h2><p>SpringBoot是Spring项目中的一个子工程，与我们所熟知的Spring-framework 同属于spring的产品:</p>\n<p><img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133541.jpg\" alt=\"1525484756737\"></p>\n<p>我们可以看到下面的一段介绍：</p>\n<blockquote>\n<p>Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.</p>\n</blockquote>\n<p>翻译一下：</p>\n<blockquote>\n<p>用一些固定的方式来构建生产级别的spring应用。Spring Boot 推崇约定大于配置的方式以便于你能够尽可能快速的启动并运行程序。</p>\n</blockquote>\n<p>其实人们把Spring Boot 称为搭建程序的<code>脚手架</code>。其最主要作用就是帮我们快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让我们关注与业务而非配置。</p>\n<h2 id=\"1-2-为什么要学习SpringBoot\"><a href=\"#1-2-为什么要学习SpringBoot\" class=\"headerlink\" title=\"1.2.为什么要学习SpringBoot\"></a>1.2.为什么要学习SpringBoot</h2><p>java一直被人诟病的一点就是臃肿、麻烦。当我们还在辛苦的搭建项目时，可能Python程序员已经把功能写好了，究其原因注意是两点：</p>\n<ul>\n<li><p>复杂的配置，</p>\n<p>项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以写配置挤占了写应用程序逻辑的时间。</p>\n</li>\n<li><p>一个是混乱的依赖管理。</p>\n<p>项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。</p>\n</li>\n</ul>\n<p>而SpringBoot让这一切成为过去！</p>\n<blockquote>\n<p>Spring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。</p>\n</blockquote>\n<p>我们可以使用SpringBoot创建java应用，并使用java –jar 启动它，就能得到一个生产级别的web工程。</p>\n<h2 id=\"1-3-SpringBoot的特点\"><a href=\"#1-3-SpringBoot的特点\" class=\"headerlink\" title=\"1.3.SpringBoot的特点\"></a>1.3.SpringBoot的特点</h2><p>Spring Boot 主要目标是：</p>\n<ul>\n<li>为所有 Spring 的开发者提供一个非常快速的、广泛接受的入门体验</li>\n<li>开箱即用（启动器starter-其实就是SpringBoot提供的一个jar包），但通过自己设置参数（.properties），即可快速摆脱这种方式。</li>\n<li>提供了一些大型项目中常见的非功能性特性，如内嵌服务器、安全、指标，健康检测、外部化配置等</li>\n<li>绝对没有代码生成，也无需 XML 配置。</li>\n</ul>\n<p>更多细节，大家可以到<a href=\"http://projects.spring.io/spring-boot/\" target=\"_blank\" rel=\"noopener\">官网</a>查看。</p>\n<h1 id=\"2-快速入门\"><a href=\"#2-快速入门\" class=\"headerlink\" title=\"2.快速入门\"></a>2.快速入门</h1><p>接下来，我们就来利用SpringBoot搭建一个web工程，体会一下SpringBoot的魅力所在！</p>\n<h2 id=\"2-1-创建工程\"><a href=\"#2-1-创建工程\" class=\"headerlink\" title=\"2.1.创建工程\"></a>2.1.创建工程</h2><p>我们先新建一个空的工程：</p>\n<p><img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133551.jpg\" alt=\"1525485888078\"></p>\n<p>工程名为demo：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133517.jpg\" alt=\"1525485977528\"></p>\n<p>新建一个model：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133550.jpg\" alt=\"1525486079389\"></p>\n<p>使用maven来构建：</p>\n<p><img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133543.jpg\" alt=\"1525486188374\"></p>\n<p>然后填写项目坐标：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133536.jpg\" alt=\"1525486236967\"></p>\n<p>目录结构：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133632.jpg\" alt=\"1525486282929\"></p>\n<p>项目结构：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133555.jpg\" alt=\"1525486435199\"></p>\n<h2 id=\"2-2-添加依赖\"><a href=\"#2-2-添加依赖\" class=\"headerlink\" title=\"2.2.添加依赖\"></a>2.2.添加依赖</h2><p>看到这里很多同学会有疑惑，前面说传统开发的问题之一就是依赖管理混乱，怎么这里我们还需要管理依赖呢？难道SpringBoot不帮我们管理吗？</p>\n<p>别着急，现在我们的项目与SpringBoot还没有什么关联。SpringBoot提供了一个名为spring-boot-starter-parent的工程，里面已经对各种常用依赖（并非全部）的版本进行了管理，我们的项目需要以这个项目为父工程，这样我们就不用操心依赖的版本问题了，需要什么依赖，直接引入坐标即可！</p>\n<h3 id=\"2-2-1-添加父工程坐标\"><a href=\"#2-2-1-添加父工程坐标\" class=\"headerlink\" title=\"2.2.1.添加父工程坐标\"></a>2.2.1.添加父工程坐标</h3>\n    <pre><code class=\"lang-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n</code></pre>\n<h3 id=\"2-2-2-添加web启动器\"><a href=\"#2-2-2-添加web启动器\" class=\"headerlink\" title=\"2.2.2.添加web启动器\"></a>2.2.2.添加web启动器</h3><p>为了让SpringBoot帮我们完成各种自动配置，我们必须引入SpringBoot提供的自动配置依赖，我们称为<code>启动器</code>。因为我们是web项目，这里我们引入web启动器：</p>\n\n    <pre><code class=\"lang-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n</code></pre>\n<p>需要注意的是，我们并没有在这里指定版本信息。因为SpringBoot的父工程已经对版本进行了管理了。</p>\n<p>这个时候，我们会发现项目中多出了大量的依赖：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133631.jpg\" alt=\"1525486980765\"></p>\n<p>这些都是SpringBoot根据spring-boot-starter-web这个依赖自动引入的，而且所有的版本都已经管理好，不会出现冲突。</p>\n<h3 id=\"2-2-3-管理jdk版本\"><a href=\"#2-2-3-管理jdk版本\" class=\"headerlink\" title=\"2.2.3.管理jdk版本\"></a>2.2.3.管理jdk版本</h3><p>默认情况下，maven工程的jdk版本是1.5，而我们开发使用的是1.8，因此这里我们需要修改jdk版本，只需要简单的添加以下属性即可：</p>\n\n    <pre><code class=\"lang-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">java.version</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">java.version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span>\n</code></pre>\n<h3 id=\"2-2-4-完整pom\"><a href=\"#2-2-4-完整pom\" class=\"headerlink\" title=\"2.2.4.完整pom\"></a>2.2.4.完整pom</h3>\n    <pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0\"</span>\n         <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n         <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.leyou.demo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>springboot-demo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">java.version</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">java.version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span>\n</code></pre>\n<h2 id=\"2-3-启动类\"><a href=\"#2-3-启动类\" class=\"headerlink\" title=\"2.3.启动类\"></a>2.3.启动类</h2><p>Spring Boot项目通过main函数即可启动，我们需要创建一个启动类：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133523.jpg\" alt=\"1525487293907\"></p>\n<p>然后编写main函数：</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Application</span> {</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> main(String[] args) {\n        SpringApplication.run(Application.<span class=\"hljs-keyword\">class</span>, args);\n    }\n}\n</code></pre>\n<h2 id=\"2-4-编写controller\"><a href=\"#2-4-编写controller\" class=\"headerlink\" title=\"2.4.编写controller\"></a>2.4.编写controller</h2><p>接下来，我们就可以像以前那样开发SpringMVC的项目了！</p>\n<p>我们编写一个controller：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133630.jpg\" alt=\"1525487465325\"></p>\n<p>代码：</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloController</span> </span>{\n\n    <span class=\"hljs-meta\">@GetMapping(<span class=\"hljs-meta-string\">\"hello\"</span>)</span>\n    <span class=\"hljs-keyword\">public</span> String hello(){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"hello, spring boot!\"</span>;\n    }\n}\n\n</code></pre>\n<h2 id=\"2-5-启动测试\"><a href=\"#2-5-启动测试\" class=\"headerlink\" title=\"2.5.启动测试\"></a>2.5.启动测试</h2><p>接下来，我们运行main函数，查看控制台：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133527.jpg\" alt=\"1525487613365\"></p>\n<p>并且可以看到监听的端口信息：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133552.jpg\" alt=\"1525487705460\"></p>\n<ul>\n<li>1）监听的端口是8080</li>\n<li>2）SpringMVC的映射路径是：/</li>\n<li>3）<code>/hello</code>路径已经映射到了<code>HelloController</code>中的<code>hello()</code>方法</li>\n</ul>\n<p>打开页面访问：<a href=\"http://localhost:8080/hello\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello</a></p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133519.jpg\" alt=\"1525487820824\"></p>\n<p>测试成功了！</p>\n<h1 id=\"3-Java配置\"><a href=\"#3-Java配置\" class=\"headerlink\" title=\"3.Java配置\"></a>3.Java配置</h1><p>在入门案例中，我们没有任何的配置，就可以实现一个SpringMVC的项目了，快速、高效！</p>\n<p>但是有同学会有疑问，如果没有任何的xml，那么我们如果要配置一个Bean该怎么办？比如我们要配置一个数据库连接池，以前会这么玩：</p>\n\n    <pre><code class=\"lang-xml\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- 配置连接池 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dataSource\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>\n      <span class=\"hljs-attr\">init-method</span>=<span class=\"hljs-string\">\"init\"</span> <span class=\"hljs-attr\">destroy-method</span>=<span class=\"hljs-string\">\"close\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"url\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"$</span></span></span><span class=\"hljs-template-variable\">{jdbc.url}</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"username\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"$</span></span></span><span class=\"hljs-template-variable\">{jdbc.username}</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"$</span></span></span><span class=\"hljs-template-variable\">{jdbc.password}</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</span></code></pre>\n<p>现在该怎么做呢？</p>\n<h2 id=\"3-1-回顾历史\"><a href=\"#3-1-回顾历史\" class=\"headerlink\" title=\"3.1.回顾历史\"></a>3.1.回顾历史</h2><p>事实上，在Spring3.0开始，Spring官方就已经开始推荐使用java配置来代替传统的xml配置了，我们不妨来回顾一下Spring的历史：</p>\n<ul>\n<li><p>Spring1.0时代</p>\n<p>在此时因为jdk1.5刚刚出来，注解开发并未盛行，因此一切Spring配置都是xml格式，想象一下所有的bean都用xml配置，细思极恐啊，心疼那个时候的程序员2秒</p>\n</li>\n<li><p>Spring2.0时代</p>\n<p>Spring引入了注解开发，但是因为并不完善，因此并未完全替代xml，此时的程序员往往是把xml与注解进行结合，貌似我们之前都是这种方式。</p>\n</li>\n<li><p>Spring3.0及以后</p>\n<p>3.0以后Spring的注解已经非常完善了，因此Spring推荐大家使用完全的java配置来代替以前的xml，不过似乎在国内并未推广盛行。然后当SpringBoot来临，人们才慢慢认识到java配置的优雅。</p>\n</li>\n</ul>\n<p>有句古话说的好：拥抱变化，拥抱未来。所以我们也应该顺应时代潮流，做时尚的弄潮儿，一起来学习下java配置的玩法。</p>\n<h2 id=\"3-2-尝试java配置\"><a href=\"#3-2-尝试java配置\" class=\"headerlink\" title=\"3.2.尝试java配置\"></a>3.2.尝试java配置</h2><p>java配置主要靠java类和一些注解，比较常用的注解有：</p>\n<ul>\n<li><code>@Configuration</code>：声明一个类作为配置类，代替xml文件</li>\n<li><code>@Bean</code>：声明在方法上，将方法的返回值加入Bean容器，代替<code>&lt;bean&gt;</code>标签</li>\n<li><code>@value</code>：属性注入</li>\n<li><code>@PropertySource</code>：指定外部属性文件，</li>\n</ul>\n<p>我们接下来用java配置来尝试实现连接池配置：</p>\n<p>首先引入Druid连接池依赖：</p>\n\n    <pre><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>druid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.1.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>创建一个jdbc.properties文件，编写jdbc属性：</p>\n\n    <pre><code class=\"lang-properties\">jdbc.<span class=\"hljs-attribute\">driverClassName</span>=com.mysql.jdbc.Driver\njdbc.<span class=\"hljs-attribute\">url</span>=jdbc:mysql://127.0.0.1:3306/leyou\njdbc.<span class=\"hljs-attribute\">username</span>=root\njdbc.<span class=\"hljs-attribute\">password</span>=123\n</code></pre>\n<p>然后编写代码：</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@PropertySource(<span class=\"hljs-meta-string\">\"classpath:jdbc.properties\"</span>)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">JdbcConfig</span> </span>{\n\n    <span class=\"hljs-meta\">@Value(<span class=\"hljs-meta-string\">\"<span class=\"hljs-subst\">${jdbc.url}</span>\"</span>)</span>\n    String url;\n    <span class=\"hljs-meta\">@Value(<span class=\"hljs-meta-string\">\"<span class=\"hljs-subst\">${jdbc.driverClassName}</span>\"</span>)</span>\n    String driverClassName;\n    <span class=\"hljs-meta\">@Value(<span class=\"hljs-meta-string\">\"<span class=\"hljs-subst\">${jdbc.username}</span>\"</span>)</span>\n    String username;\n    <span class=\"hljs-meta\">@Value(<span class=\"hljs-meta-string\">\"<span class=\"hljs-subst\">${jdbc.password}</span>\"</span>)</span>\n    String password;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> DataSource dataSource() {\n        DruidDataSource dataSource = new DruidDataSource();\n        dataSource.setUrl(url);\n        dataSource.setDriverClassName(driverClassName);\n        dataSource.setUsername(username);\n        dataSource.setPassword(password);\n        <span class=\"hljs-keyword\">return</span> dataSource;\n    }\n}\n</code></pre>\n<p>解读：</p>\n<ul>\n<li><code>@Configuration</code>：声明我们<code>JdbcConfig</code>是一个配置类</li>\n<li><code>@PropertySource</code>：指定属性文件的路径是:<code>classpath:jdbc.properties</code></li>\n<li>通过<code>@Value</code>为属性注入值</li>\n<li>通过@Bean将 <code>dataSource()</code>方法声明为一个注册Bean的方法，Spring会自动调用该方法，将方法的返回值加入Spring容器中。</li>\n</ul>\n<p>然后我们就可以在任意位置通过<code>@Autowired</code>注入DataSource了！</p>\n<p>我们在<code>HelloController</code>中测试：</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloController</span> </span>{\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> DataSource dataSource;\n\n    <span class=\"hljs-meta\">@GetMapping(<span class=\"hljs-meta-string\">\"hello\"</span>)</span>\n    <span class=\"hljs-keyword\">public</span> String hello() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"hello, spring boot!\"</span> + dataSource;\n    }\n}\n</code></pre>\n<p>然后Debug运行并查看：</p>\n<p><img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133633.jpg\" alt=\"1525492528558\"></p>\n<p>属性注入成功了！</p>\n<h2 id=\"3-3-SpringBoot的属性注入\"><a href=\"#3-3-SpringBoot的属性注入\" class=\"headerlink\" title=\"3.3.SpringBoot的属性注入\"></a>3.3.SpringBoot的属性注入</h2><p>在上面的案例中，我们实验了java配置方式。不过属性注入使用的是@Value注解。这种方式虽然可行，但是不够强大，因为它只能注入基本类型值。</p>\n<p>在SpringBoot中，提供了一种新的属性注入方式，支持各种java基本数据类型及复杂类型的注入。</p>\n<p>1）我们新建一个类，用来进行属性注入：</p>\n\n    <pre><code class=\"lang-java\">@ConfigurationProperties(prefix = <span class=\"hljs-string\">\"jdbc\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">JdbcProperties</span> </span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">String</span> url;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">String</span> driverClassName;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">String</span> username;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">String</span> password;\n    <span class=\"hljs-comment\">// ... 略</span>\n    <span class=\"hljs-comment\">// getters 和 setters</span>\n}\n\n</code></pre>\n<ul>\n<li><p>在类上通过@ConfigurationProperties注解声明当前类为属性读取类</p>\n</li>\n<li><p><code>prefix=&quot;jdbc&quot;</code>读取属性文件中，前缀为jdbc的值。</p>\n</li>\n<li><p>在类上定义各个属性，名称必须与属性文件中<code>jdbc.</code>后面部分一致</p>\n</li>\n<li><p>需要注意的是，这里我们并没有指定属性文件的地址，所以我们需要把jdbc.properties名称改为application.properties，这是SpringBoot默认读取的属性文件名：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133539.jpg\" alt=\"1525496325572\"></p>\n</li>\n</ul>\n<p>2）在JdbcConfig中使用这个属性：</p>\n\n    <pre><code class=\"lang-java\">@Configuration\n@<span class=\"hljs-constructor\">EnableConfigurationProperties(JdbcProperties.<span class=\"hljs-params\">class</span>)</span>\npublic <span class=\"hljs-keyword\">class</span> JdbcConfig {\n\n    @Bean\n    public DataSource data<span class=\"hljs-constructor\">Source(JdbcProperties <span class=\"hljs-params\">jdbc</span>)</span> {\n        DruidDataSource dataSource = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">DruidDataSource()</span>;\n        dataSource.set<span class=\"hljs-constructor\">Url(<span class=\"hljs-params\">jdbc</span>.<span class=\"hljs-params\">getUrl</span>()</span>);\n        dataSource.set<span class=\"hljs-constructor\">DriverClassName(<span class=\"hljs-params\">jdbc</span>.<span class=\"hljs-params\">getDriverClassName</span>()</span>);\n        dataSource.set<span class=\"hljs-constructor\">Username(<span class=\"hljs-params\">jdbc</span>.<span class=\"hljs-params\">getUsername</span>()</span>);\n        dataSource.set<span class=\"hljs-constructor\">Password(<span class=\"hljs-params\">jdbc</span>.<span class=\"hljs-params\">getPassword</span>()</span>);\n        return dataSource;\n    }\n}\n</code></pre>\n<ul>\n<li><p>通过<code>@EnableConfigurationProperties(JdbcProperties.class)</code>来声明要使用<code>JdbcProperties</code>这个类的对象</p>\n</li>\n<li><p>然后你可以通过以下方式注入JdbcProperties：</p>\n<ul>\n<li><p>@Autowired注入</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Autowired</span>\n<span class=\"hljs-keyword\">private</span> JdbcProperties prop;\n</code></pre>\n</li>\n<li><p>构造函数注入</p>\n\n    <pre><code class=\"lang-java\">private JdbcProperties <span class=\"hljs-keyword\">prop</span>;\npublic JdbcConfig(Jdbcproperties <span class=\"hljs-keyword\">prop</span>){\n    this.<span class=\"hljs-keyword\">prop</span> = <span class=\"hljs-keyword\">prop</span>;\n}\n</code></pre>\n</li>\n<li><p>声明有@Bean的方法参数注入</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Bean</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">Datasource <span class=\"hljs-title\">dataSource</span><span class=\"hljs-params\">(JdbcProperties prop)</span></span>{\n    <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>本例中，我们采用第三种方式。</p>\n<p>3）测试结果：</p>\n<p><img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133633.jpg\" alt=\"1525492528558\"></p>\n<p>大家会觉得这种方式似乎更麻烦了，事实上这种方式有更强大的功能，也是SpringBoot推荐的注入方式。两者对比关系：</p>\n<p><img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133556.jpg\" alt=\"1525496543249\"></p>\n<p>优势：</p>\n<ul>\n<li><p>Relaxed binding：松散绑定</p>\n<ul>\n<li><p>不严格要求属性文件中的属性名与成员变量名一致。支持驼峰，中划线，下划线等等转换，甚至支持对象引导。比如：user.friend.name：代表的是user对象中的friend属性中的name属性，显然friend也是对象。@value注解就难以完成这样的注入方式。</p>\n</li>\n<li><p>meta-data support：元数据支持，帮助IDE生成属性提示（写开源框架会用到）。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-4、更优雅的注入\"><a href=\"#3-4、更优雅的注入\" class=\"headerlink\" title=\"3.4、更优雅的注入\"></a>3.4、更优雅的注入</h2><p>事实上，如果一段属性只有一个Bean需要使用，我们无需将其注入到一个类（JdbcProperties）中。而是直接在需要的地方声明即可：</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">JdbcConfig</span> </span>{\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-comment\">// 声明要注入的属性前缀，SpringBoot会自动把相关属性通过set方法注入到DataSource中</span>\n    <span class=\"hljs-meta\">@ConfigurationProperties</span>(prefix = <span class=\"hljs-string\">\"jdbc\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title\">dataSource</span><span class=\"hljs-params\">()</span> </span>{\n        DruidDataSource dataSource = <span class=\"hljs-keyword\">new</span> DruidDataSource();\n        <span class=\"hljs-keyword\">return</span> dataSource;\n    }\n}\n</code></pre>\n<p>我们直接把<code>@ConfigurationProperties(prefix = &quot;jdbc&quot;)</code>声明在需要使用的<code>@Bean</code>的方法上，然后SpringBoot就会自动调用这个Bean（此处是DataSource）的set方法，然后完成注入。使用的前提是：<strong>该类必须有对应属性的set方法！</strong></p>\n<p>我们将jdbc的url改成：/heima，再次测试：</p>\n<p><img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133525.jpg\" alt=\"1525497513206\"></p>\n<h1 id=\"4-自动配置原理\"><a href=\"#4-自动配置原理\" class=\"headerlink\" title=\"4.自动配置原理\"></a>4.自动配置原理</h1><p>使用SpringBoot之后，一个整合了SpringMVC的WEB工程开发，变的无比简单，那些繁杂的配置都消失不见了，这是如何做到的？</p>\n<p>一切魔力的开始，都是从我们的main函数来的，所以我们再次来看下启动类：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133538.jpg\" alt=\"1525488044650\"></p>\n<p>我们发现特别的地方有两个：</p>\n<ul>\n<li>注解：@SpringBootApplication</li>\n<li>run方法：SpringApplication.run()</li>\n</ul>\n<p>我们分别来研究这两个部分。</p>\n<h2 id=\"4-1-了解-SpringBootApplication\"><a href=\"#4-1-了解-SpringBootApplication\" class=\"headerlink\" title=\"4.1.了解@SpringBootApplication\"></a>4.1.了解@SpringBootApplication</h2><p>点击进入，查看源码：</p>\n<p><img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133529.jpg\" alt=\"1525488226710\"></p>\n<p>这里重点的注解有3个：</p>\n<ul>\n<li>@SpringBootConfiguration</li>\n<li>@EnableAutoConfiguration</li>\n<li>@ComponentScan</li>\n</ul>\n<h3 id=\"4-1-1-SpringBootConfiguration\"><a href=\"#4-1-1-SpringBootConfiguration\" class=\"headerlink\" title=\"4.1.1.@SpringBootConfiguration\"></a>4.1.1.@SpringBootConfiguration</h3><p>我们继续点击查看源码：</p>\n<p><img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133537.jpg\" alt=\"1525488518514\"></p>\n<p>通过这段我们可以看出，在这个注解上面，又有一个<code>@Configuration</code>注解。通过上面的注释阅读我们知道：这个注解的作用就是声明当前类是一个配置类，然后Spring会自动扫描到添加了<code>@Configuration</code>的类，并且读取其中的配置信息。而<code>@SpringBootConfiguration</code>是来声明当前类是SpringBoot应用的配置类，项目中只能有一个。所以一般我们无需自己添加。</p>\n<h3 id=\"4-1-2-EnableAutoConfiguration\"><a href=\"#4-1-2-EnableAutoConfiguration\" class=\"headerlink\" title=\"4.1.2.@EnableAutoConfiguration\"></a>4.1.2.@EnableAutoConfiguration</h3><p>关于这个注解，官网上有一段说明：</p>\n<blockquote>\n<p>The second class-level annotation is <code>@EnableAutoConfiguration</code>. This annotation<br>tells Spring Boot to “guess” how you want to configure Spring, based on the jar<br>dependencies that you have added. Since <code>spring-boot-starter-web</code> added Tomcat<br>and Spring MVC, the auto-configuration assumes that you are developing a web<br>application and sets up Spring accordingly.</p>\n</blockquote>\n<p>简单翻译以下：</p>\n<blockquote>\n<p>第二级的注解<code>@EnableAutoConfiguration</code>，告诉SpringBoot基于你所添加的依赖，去“猜测”你想要如何配置Spring。比如我们引入了<code>spring-boot-starter-web</code>，而这个启动器中帮我们添加了<code>tomcat</code>、<code>SpringMVC</code>的依赖。此时自动配置就知道你是要开发一个web应用，所以就帮你完成了web及SpringMVC的默认配置了！</p>\n</blockquote>\n<p>总结，SpringBoot内部对大量的第三方库或Spring内部库进行了默认配置，这些配置是否生效，取决于我们是否引入了对应库所需的依赖，如果有那么默认配置就会生效。</p>\n<p>所以，我们使用SpringBoot构建一个项目，只需要引入所需框架的依赖，配置就可以交给SpringBoot处理了。除非你不希望使用SpringBoot的默认配置，它也提供了自定义配置的入口。</p>\n<h4 id=\"4-1-3-ComponentScan\"><a href=\"#4-1-3-ComponentScan\" class=\"headerlink\" title=\"4.1.3.@ComponentScan\"></a>4.1.3.@ComponentScan</h4><p>我们跟进源码：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133554.jpg\" alt=\"1525498265579\"></p>\n<p>并没有看到什么特殊的地方。我们查看注释：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133526.jpg\" alt=\"1525498351385\"></p>\n<p>大概的意思：</p>\n<blockquote>\n<p>配置组件扫描的指令。提供了类似与<code>&lt;context:component-scan&gt;</code>标签的作用</p>\n<p>通过basePackageClasses或者basePackages属性来指定要扫描的包。如果没有指定这些属性，那么将从声明这个注解的类所在的包开始，扫描包及子包</p>\n</blockquote>\n<p>而我们的@SpringBootApplication注解声明的类就是main函数所在的启动类，因此扫描的包是该类所在包及其子包。因此，<strong>一般启动类会放在一个比较前的包目录中。</strong></p>\n<h2 id=\"4-2-默认配置原理\"><a href=\"#4-2-默认配置原理\" class=\"headerlink\" title=\"4.2.默认配置原理\"></a>4.2.默认配置原理</h2><h3 id=\"4-2-1默认配置类\"><a href=\"#4-2-1默认配置类\" class=\"headerlink\" title=\"4.2.1默认配置类\"></a>4.2.1默认配置类</h3><p>通过刚才的学习，我们知道@EnableAutoConfiguration会开启SpringBoot的自动配置，并且根据你引入的依赖来生效对应的默认配置。那么问题来了：</p>\n<ul>\n<li>这些默认配置是在哪里定义的呢？</li>\n<li>为何依赖引入就会触发配置呢？</li>\n</ul>\n<p>其实在我们的项目中，已经引入了一个依赖：spring-boot-autoconfigure，其中定义了大量自动配置类：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133518.jpg\" alt=\"1525499397690\"></p>\n<p>还有：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133528.jpg\" alt=\"1525499426598\"></p>\n<p>非常多，几乎涵盖了现在主流的开源框架，例如：</p>\n<ul>\n<li>redis</li>\n<li>jms</li>\n<li>amqp</li>\n<li>jdbc</li>\n<li>jackson</li>\n<li>mongodb</li>\n<li>jpa</li>\n<li>solr</li>\n<li>elasticsearch</li>\n</ul>\n<p>… 等等</p>\n<p>我们来看一个我们熟悉的，例如SpringMVC，查看mvc 的自动配置类：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133547.jpg\" alt=\"1525499859426\"></p>\n<p>打开WebMvcAutoConfiguration：</p>\n<p><img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133553.jpg\" alt=\"1525500000816\"></p>\n<p>我们看到这个类上的4个注解：</p>\n<ul>\n<li><code>@Configuration</code>：声明这个类是一个配置类</li>\n</ul>\n<ul>\n<li><p><code>@ConditionalOnWebApplication(type = Type.SERVLET)</code></p>\n<p>ConditionalOn，翻译就是在某个条件下，此处就是满足项目的类是是Type.SERVLET类型，也就是一个普通web工程，显然我们就是</p>\n</li>\n<li><p><code>@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })</code></p>\n<p>这里的条件是OnClass，也就是满足以下类存在：Servlet、DispatcherServlet、WebMvcConfigurer，其中Servlet只要引入了tomcat依赖自然会有，后两个需要引入SpringMVC才会有。这里就是判断你是否引入了相关依赖，引入依赖后该条件成立，当前类的配置才会生效！</p>\n</li>\n<li><p><code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code></p>\n<p>这个条件与上面不同，OnMissingBean，是说环境中没有指定的Bean这个才生效。其实这就是自定义配置的入口，也就是说，如果我们自己配置了一个WebMVCConfigurationSupport的类，那么这个默认配置就会失效！</p>\n</li>\n</ul>\n<p>接着，我们查看该类中定义了什么：</p>\n<p>视图解析器：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133542.jpg\" alt=\"1525500405278\"></p>\n<p>处理器适配器（HandlerAdapter）：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133524.jpg\" alt=\"1525500452517\"></p>\n<p>还有很多，这里就不一一截图了。</p>\n<h3 id=\"4-2-2-默认配置属性\"><a href=\"#4-2-2-默认配置属性\" class=\"headerlink\" title=\"4.2.2.默认配置属性\"></a>4.2.2.默认配置属性</h3><p>另外，这些默认配置的属性来自哪里呢？</p>\n<p><img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133535.jpg\" alt=\"1525500697391\"></p>\n<p>我们看到，这里通过@EnableAutoConfiguration注解引入了两个属性：WebMvcProperties和ResourceProperties。这不正是SpringBoot的属性注入玩法嘛。</p>\n<p>我们查看这两个属性类：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133520.jpg\" alt=\"1525500810914\"></p>\n<p>找到了内部资源视图解析器的prefix和suffix属性。</p>\n<p>ResourceProperties中主要定义了静态资源（.js,.html,.css等)的路径：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133545.jpg\" alt=\"1525500921773\"></p>\n<p>如果我们要覆盖这些默认属性，只需要在application.properties中定义与其前缀prefix和字段名一致的属性即可。</p>\n<h2 id=\"4-3-总结\"><a href=\"#4-3-总结\" class=\"headerlink\" title=\"4.3.总结\"></a>4.3.总结</h2><p>SpringBoot为我们提供了默认配置，而默认配置生效的条件一般有两个：</p>\n<ul>\n<li>你引入了相关依赖</li>\n<li>你自己没有配置</li>\n</ul>\n<p>1）启动器</p>\n<p>所以，我们如果不想配置，只需要引入依赖即可，而依赖版本我们也不用操心，因为只要引入了SpringBoot提供的stater（启动器），就会自动管理依赖及版本了。</p>\n<p>因此，玩SpringBoot的第一件事情，就是找启动器，SpringBoot提供了大量的默认启动器，参考课前资料中提供的《SpringBoot启动器.txt》</p>\n<p>2）全局配置</p>\n<p>另外，SpringBoot的默认配置，都会读取默认属性，而这些属性可以通过自定义<code>application.properties</code>文件来进行覆盖。这样虽然使用的还是默认配置，但是配置中的值改成了我们自定义的。</p>\n<p>因此，玩SpringBoot的第二件事情，就是通过<code>application.properties</code>来覆盖默认属性值，形成自定义配置。我们需要知道SpringBoot的默认属性key，非常多，参考课前资料提供的：《SpringBoot全局属性.md》</p>\n<h1 id=\"5-SpringBoot实践\"><a href=\"#5-SpringBoot实践\" class=\"headerlink\" title=\"5.SpringBoot实践\"></a>5.SpringBoot实践</h1><p>接下来，我们来看看如何用SpringBoot来玩转以前的SSM,我们沿用之前讲解SSM用到的数据库tb_user和实体类User</p>\n<h2 id=\"5-1-整合SpringMVC\"><a href=\"#5-1-整合SpringMVC\" class=\"headerlink\" title=\"5.1.整合SpringMVC\"></a>5.1.整合SpringMVC</h2><p>虽然默认配置已经可以使用SpringMVC了，不过我们有时候需要进行自定义配置。</p>\n<h3 id=\"5-1-1-修改端口\"><a href=\"#5-1-1-修改端口\" class=\"headerlink\" title=\"5.1.1.修改端口\"></a>5.1.1.修改端口</h3><p>查看SpringBoot的全局属性可知，端口通过以下方式配置：</p>\n\n    <pre><code class=\"lang-properties\"><span class=\"hljs-comment\"># 映射端口</span>\nserver.<span class=\"hljs-attribute\">port</span>=80\n</code></pre>\n<p>重启服务后测试：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133522.jpg\" alt=\"1525511878440\"></p>\n<h3 id=\"5-1-2-访问静态资源\"><a href=\"#5-1-2-访问静态资源\" class=\"headerlink\" title=\"5.1.2.访问静态资源\"></a>5.1.2.访问静态资源</h3><p>现在，我们的项目是一个jar工程，那么就没有webapp，我们的静态资源该放哪里呢？</p>\n<p>回顾我们上面看的源码，有一个叫做ResourceProperties的类，里面就定义了静态资源的默认查找路径：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133545.jpg\" alt=\"1525500921773\"></p>\n<p>默认的静态资源路径为：</p>\n<ul>\n<li>classpath:/META-INF/resources/</li>\n<li>classpath:/resources/</li>\n<li>classpath:/static/</li>\n<li>classpath:/public</li>\n</ul>\n<p>只要静态资源放在这些目录中任何一个，SpringMVC都会帮我们处理。</p>\n<p>我们习惯会把静态资源放在<code>classpath:/static/</code>目录下。我们创建目录，并且添加一些静态资源：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133546.jpg\" alt=\"1525512196866\"></p>\n<p>重启项目后测试：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133531.jpg\" alt=\"1525512253682\"></p>\n<h3 id=\"5-1-3-添加拦截器\"><a href=\"#5-1-3-添加拦截器\" class=\"headerlink\" title=\"5.1.3.添加拦截器\"></a>5.1.3.添加拦截器</h3><p>拦截器也是我们经常需要使用的，在SpringBoot中该如何配置呢？</p>\n<p>拦截器不是一个普通属性，而是一个类，所以就要用到java配置方式了。在SpringBoot官方文档中有这么一段说明：</p>\n<blockquote>\n<p>If you want to keep Spring Boot MVC features and you want to add additional <a href=\"https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/web.html#mvc\" target=\"_blank\" rel=\"noopener\">MVC configuration</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, you can declare a <code>WebMvcRegistrationsAdapter</code> instance to provide such components.</p>\n<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p>\n</blockquote>\n<p>翻译：</p>\n<blockquote>\n<p>如果你想要保持Spring Boot 的一些默认MVC特征，同时又想自定义一些MVC配置（包括：拦截器，格式化器, 视图控制器、消息转换器 等等），你应该让一个类实现<code>WebMvcConfigurer</code>，并且添加<code>@Configuration</code>注解，但是<strong>千万不要</strong>加<code>@EnableWebMvc</code>注解。如果你想要自定义<code>HandlerMapping</code>、<code>HandlerAdapter</code>、<code>ExceptionResolver</code>等组件，你可以创建一个<code>WebMvcRegistrationsAdapter</code>实例 来提供以上组件。</p>\n<p>如果你想要完全自定义SpringMVC，不保留SpringBoot提供的一切特征，你可以自己定义类并且添加<code>@Configuration</code>注解和<code>@EnableWebMvc</code>注解</p>\n</blockquote>\n<p>总结：通过实现<code>WebMvcConfigurer</code>并添加<code>@Configuration</code>注解来实现自定义部分SpringMvc配置。</p>\n<p>首先我们定义一个拦截器：</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">HandlerInterceptor</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> Logger logger = LoggerFactory.getLogger(LoginInterceptor.class);\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object <span class=\"hljs-keyword\">handler</span>)</span> </span>{\n        logger.debug(<span class=\"hljs-string\">\"preHandle method is now running!\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">postHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object <span class=\"hljs-keyword\">handler</span>, ModelAndView modelAndView)</span> </span>{\n        logger.debug(<span class=\"hljs-string\">\"postHandle method is now running!\"</span>);\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">afterCompletion</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object <span class=\"hljs-keyword\">handler</span>, Exception ex)</span> </span>{\n        logger.debug(<span class=\"hljs-string\">\"afterCompletion method is now running!\"</span>);\n    }\n}\n</code></pre>\n<p>然后，我们定义配置类，注册拦截器：</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MvcConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">WebMvcConfigurer</span></span>{\n    <span class=\"hljs-comment\">/**\n     * 通过<span class=\"hljs-doctag\">@Bean</span>注解，将我们定义的拦截器注册到Spring容器\n     * <span class=\"hljs-doctag\">@return</span>\n     */</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> LoginInterceptor <span class=\"hljs-title\">loginInterceptor</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> LoginInterceptor();\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 重写接口中的addInterceptors方法，添加自定义拦截器\n     * <span class=\"hljs-doctag\">@param</span> registry\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addInterceptors</span><span class=\"hljs-params\">(InterceptorRegistry registry)</span> </span>{\n        <span class=\"hljs-comment\">// 通过registry来注册拦截器，通过addPathPatterns来添加拦截路径</span>\n        registry.addInterceptor(<span class=\"hljs-keyword\">this</span>.loginInterceptor()).addPathPatterns(<span class=\"hljs-string\">\"/**\"</span>);\n    }\n}\n</code></pre>\n<p>结构如下：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133548.jpg\" alt=\"1525513555179\"></p>\n<p>接下来运行并查看日志：</p>\n<p>你会发现日志中什么都没有，因为我们记录的log级别是debug，默认是显示info以上，我们需要进行配置。</p>\n<p>SpringBoot通过<code>logging.level.*=debug</code>来配置日志级别，*填写包名</p>\n\n    <pre><code class=\"lang-properties\"># 设置<span class=\"hljs-keyword\">com</span>.leyou包的日志级别为<span class=\"hljs-keyword\">debug</span>\nlogging.level.<span class=\"hljs-keyword\">com</span>.leyou=<span class=\"hljs-keyword\">debug</span>\n</code></pre>\n<p>再次运行查看：</p>\n\n    <pre><code class=\"lang-verilog\"><span class=\"hljs-number\">2018</span><span class=\"hljs-number\">-05</span><span class=\"hljs-number\">-05</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">01.811</span> DEBUG <span class=\"hljs-number\">4548</span> --- [p-nio<span class=\"hljs-number\">-80</span>-exec<span class=\"hljs-number\">-1</span>] com.leyou.<span class=\"hljs-built_in\">int</span>erceptor.LoginInterceptor   : preHandle method <span class=\"hljs-keyword\">is</span> now running!\n<span class=\"hljs-number\">2018</span><span class=\"hljs-number\">-05</span><span class=\"hljs-number\">-05</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">01.854</span> DEBUG <span class=\"hljs-number\">4548</span> --- [p-nio<span class=\"hljs-number\">-80</span>-exec<span class=\"hljs-number\">-1</span>] com.leyou.<span class=\"hljs-built_in\">int</span>erceptor.LoginInterceptor   : postHandle method <span class=\"hljs-keyword\">is</span> now running!\n<span class=\"hljs-number\">2018</span><span class=\"hljs-number\">-05</span><span class=\"hljs-number\">-05</span> <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">01.854</span> DEBUG <span class=\"hljs-number\">4548</span> --- [p-nio<span class=\"hljs-number\">-80</span>-exec<span class=\"hljs-number\">-1</span>] com.leyou.<span class=\"hljs-built_in\">int</span>erceptor.LoginInterceptor   : afterCompletion method <span class=\"hljs-keyword\">is</span> now running!\n</code></pre>\n<h2 id=\"5-2-整合jdbc和事务\"><a href=\"#5-2-整合jdbc和事务\" class=\"headerlink\" title=\"5.2.整合jdbc和事务\"></a>5.2.整合jdbc和事务</h2><p>spring中的jdbc连接和事务是配置中的重要一环，在SpringBoot中该如何处理呢？</p>\n<p>答案是不需要处理，我们只要找到SpringBoot提供的启动器即可：</p>\n\n    <pre><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>当然，不要忘了数据库驱动，SpringBoot并不知道我们用的什么数据库，这里我们选择MySQL：</p>\n\n    <pre><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>至于事务，SpringBoot中通过注解来控制。就是我们熟知的<code>@Transactional</code></p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserService</span> </span>{\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> UserMapper userMapper;\n\n    <span class=\"hljs-keyword\">public</span> User queryById(<span class=\"hljs-built_in\">Long</span> id){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.userMapper.selectByPrimaryKey(id);\n    }\n\n    <span class=\"hljs-meta\">@Transactional</span>\n    <span class=\"hljs-keyword\">public</span> void deleteById(<span class=\"hljs-built_in\">Long</span> id){\n        <span class=\"hljs-keyword\">this</span>.userMapper.deleteByPrimaryKey(id);\n    }\n}\n</code></pre>\n<h2 id=\"5-3-整合连接池\"><a href=\"#5-3-整合连接池\" class=\"headerlink\" title=\"5.3.整合连接池\"></a>5.3.整合连接池</h2><p>其实，在刚才引入jdbc启动器的时候，SpringBoot已经自动帮我们引入了一个连接池：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133532.jpg\" alt=\"1525514424562\"></p>\n<p>HikariCP应该是目前速度最快的连接池了，我们看看它与c3p0的对比：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133534.jpg\" alt=\"1525516441005\"></p>\n<p>因此，我们只需要指定连接池参数即可：</p>\n\n    <pre><code class=\"lang-properties\"><span class=\"hljs-comment\"># 连接四大参数</span>\nspring.datasource.<span class=\"hljs-attribute\">url</span>=jdbc:mysql://localhost:3306/heima\nspring.datasource.<span class=\"hljs-attribute\">username</span>=root\nspring.datasource.<span class=\"hljs-attribute\">password</span>=123\n<span class=\"hljs-comment\"># 可省略，SpringBoot自动推断</span>\nspring.datasource.<span class=\"hljs-attribute\">driverClassName</span>=com.mysql.jdbc.Driver\n\nspring.datasource.hikari.<span class=\"hljs-attribute\">idle-timeout</span>=60000\nspring.datasource.hikari.<span class=\"hljs-attribute\">maximum-pool-size</span>=30\nspring.datasource.hikari.<span class=\"hljs-attribute\">minimum-idle</span>=10\n</code></pre>\n<p>当然，如果你更喜欢Druid连接池，也可以使用Druid官方提供的启动器：</p>\n\n    <pre><code class=\"lang-xml\"><span class=\"hljs-comment\">&lt;!-- Druid连接池 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.1.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>而连接信息的配置与上面是类似的，只不过在连接池特有属性上，方式略有不同：</p>\n\n    <pre><code class=\"lang-properties\">#初始化连接数\nspring<span class=\"hljs-selector-class\">.datasource</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.initial-size</span>=<span class=\"hljs-number\">1</span>\n#最小空闲连接\nspring<span class=\"hljs-selector-class\">.datasource</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.min-idle</span>=<span class=\"hljs-number\">1</span>\n#最大活动连接\nspring<span class=\"hljs-selector-class\">.datasource</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.max-active</span>=<span class=\"hljs-number\">20</span>\n#获取连接时测试是否可用\nspring<span class=\"hljs-selector-class\">.datasource</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.test-on-borrow</span>=true\n#监控页面启动\nspring<span class=\"hljs-selector-class\">.datasource</span><span class=\"hljs-selector-class\">.druid</span><span class=\"hljs-selector-class\">.stat-view-servlet</span><span class=\"hljs-selector-class\">.allow</span>=true\n\n</code></pre>\n<h2 id=\"5-4-整合mybatis\"><a href=\"#5-4-整合mybatis\" class=\"headerlink\" title=\"5.4.整合mybatis\"></a>5.4.整合mybatis</h2><h3 id=\"5-4-1-mybatis\"><a href=\"#5-4-1-mybatis\" class=\"headerlink\" title=\"5.4.1.mybatis\"></a>5.4.1.mybatis</h3><p>SpringBoot官方并没有提供Mybatis的启动器，不过Mybatis<a href=\"https://github.com/mybatis/spring-boot-starter\" target=\"_blank\" rel=\"noopener\">官网</a>自己实现了：</p>\n\n    <pre><code class=\"lang-xml\"><span class=\"hljs-comment\">&lt;!--mybatis --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.3.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n\n</code></pre>\n<p>配置，基本没有需要配置的：</p>\n\n    <pre><code class=\"lang-properties\"><span class=\"hljs-comment\"># mybatis 别名扫描</span>\nmybatis.<span class=\"hljs-attribute\">type-aliases-package</span>=com.heima.pojo\n<span class=\"hljs-comment\"># mapper.xml文件位置,如果没有映射文件，请注释掉</span>\nmybatis.<span class=\"hljs-attribute\">mapper-locations</span>=classpath:mappers/*.xml\n</code></pre>\n<p>需要注意，这里没有配置mapper接口扫描包，因此我们需要给每一个Mapper接口添加<code>@Mapper</code>注解，才能被识别。</p>\n\n    <pre><code class=\"lang-java\">@Mapper\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-symbol\">UserMapper</span> {\n}\n</code></pre>\n<h3 id=\"5-4-2-通用mapper\"><a href=\"#5-4-2-通用mapper\" class=\"headerlink\" title=\"5.4.2.通用mapper\"></a>5.4.2.通用mapper</h3><p>通用Mapper的作者也为自己的插件编写了启动器，我们直接引入即可：</p>\n\n    <pre><code class=\"lang-xml\"><span class=\"hljs-comment\">&lt;!-- 通用mapper --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>tk.mybatis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>不需要做任何配置就可以使用了。</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@Mapper</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">tk</span>.<span class=\"hljs-title\">mybatis</span>.<span class=\"hljs-title\">mapper</span>.<span class=\"hljs-title\">common</span>.<span class=\"hljs-title\">Mapper</span>&lt;<span class=\"hljs-title\">User</span>&gt;{</span>\n}\n</code></pre>\n<h2 id=\"5-5-启动测试\"><a href=\"#5-5-启动测试\" class=\"headerlink\" title=\"5.5.启动测试\"></a>5.5.启动测试</h2><p>将controller进行简单改造：</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloController</span> </span>{\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> UserService userService;\n\n    <span class=\"hljs-meta\">@GetMapping(<span class=\"hljs-meta-string\">\"/hello\"</span>)</span>\n    <span class=\"hljs-keyword\">public</span> User hello() {\n        User user = <span class=\"hljs-keyword\">this</span>.userService.queryById(<span class=\"hljs-number\">8L</span>);\n        <span class=\"hljs-keyword\">return</span> user;\n    }\n}\n\n</code></pre>\n<p>我们启动项目，查看：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133549.jpg\" alt=\"1525516714124\"></p>\n<h1 id=\"6-Thymeleaf快速入门\"><a href=\"#6-Thymeleaf快速入门\" class=\"headerlink\" title=\"6.Thymeleaf快速入门\"></a>6.Thymeleaf快速入门</h1><p>SpringBoot并不推荐使用jsp，但是支持一些模板引擎技术：</p>\n<p><img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133521.jpg\" alt=\"1525517263421\"></p>\n<p>以前大家用的比较多的是Freemarker，但是我们今天的主角是Thymeleaf！</p>\n<h2 id=\"6-1-为什么是Thymeleaf？\"><a href=\"#6-1-为什么是Thymeleaf？\" class=\"headerlink\" title=\"6.1.为什么是Thymeleaf？\"></a>6.1.为什么是Thymeleaf？</h2><p>简单说， Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点：</p>\n<ul>\n<li>动静结合：Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li>\n<li>开箱即用：它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li>\n<li>多方言支持：Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li>\n<li>与SpringBoot完美整合，SpringBoot提供了Thymeleaf的默认配置，并且为Thymeleaf设置了视图解析器，我们可以像以前操作jsp一样来操作Thymeleaf。代码几乎没有任何区别，就是在模板语法上有区别。</li>\n</ul>\n<p>接下来，我们就通过入门案例来体会Thymeleaf的魅力：</p>\n<h2 id=\"6-2-编写接口\"><a href=\"#6-2-编写接口\" class=\"headerlink\" title=\"6.2.编写接口\"></a>6.2.编写接口</h2><p>编写一个controller，返回一些用户数据，放入模型中，等会在页面渲染</p>\n\n    <pre><code class=\"lang-java\"><span class=\"hljs-meta\">@GetMapping(<span class=\"hljs-meta-string\">\"/all\"</span>)</span>\n<span class=\"hljs-keyword\">public</span> String all(ModelMap model) {\n    <span class=\"hljs-comment\">// 查询用户</span>\n    List&lt;User&gt; users = <span class=\"hljs-keyword\">this</span>.userService.queryAll();\n    <span class=\"hljs-comment\">// 放入模型</span>\n    model.addAttribute(<span class=\"hljs-string\">\"users\"</span>, users);\n    <span class=\"hljs-comment\">// 返回模板名称（就是classpath:/templates/目录下的html文件名）</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"users\"</span>;\n}\n</code></pre>\n<h2 id=\"6-3-引入启动器\"><a href=\"#6-3-引入启动器\" class=\"headerlink\" title=\"6.3.引入启动器\"></a>6.3.引入启动器</h2><p>直接引入启动器：</p>\n\n    <pre><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<p>SpringBoot会自动为Thymeleaf注册一个视图解析器：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133540.jpg\" alt=\"1525522481007\"></p>\n<p>与解析JSP的InternalViewResolver类似，Thymeleaf也会根据前缀和后缀来确定模板文件的位置：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133544.jpg\" alt=\"1525522811359\"></p>\n<ul>\n<li>默认前缀：<code>classpath:/templates/</code></li>\n<li>默认后缀：<code>.html</code></li>\n</ul>\n<p>所以如果我们返回视图：<code>users</code>，会指向到 <code>classpath:/templates/users.html</code></p>\n<p>一般我们无需进行修改，默认即可。</p>\n<h2 id=\"6-4-静态页面\"><a href=\"#6-4-静态页面\" class=\"headerlink\" title=\"6.4.静态页面\"></a>6.4.静态页面</h2><p>根据上面的文档介绍，模板默认放在classpath下的templates文件夹，我们新建一个html文件放入其中：</p>\n<p> <img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133530.jpg\" alt=\"1525521721279\"></p>\n<p>编写html模板，渲染模型中的数据：</p>\n<p>注意，把html 的名称空间，改成：<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code> 会有语法提示</p>\n\n    <pre><code class=\"lang-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">xmlns:th</span>=<span class=\"hljs-string\">\"http://www.thymeleaf.org\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>首页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-tag\">table</span> {<span class=\"hljs-attribute\">border-collapse</span>: collapse; <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>; <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">80%</span>; <span class=\"hljs-attribute\">margin</span>: auto}\n        <span class=\"hljs-selector-tag\">table</span>, <span class=\"hljs-selector-tag\">th</span>, <span class=\"hljs-selector-tag\">td</span> {<span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid darkslategray;<span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>}\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"text-align: center\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color: darkslategray; font-size: 30px\"</span>&gt;</span>欢迎光临！<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hr</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"list\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>id<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>姓名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>用户名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>年龄<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>性别<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>生日<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>备注<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">th:each</span>=<span class=\"hljs-string\">\"user : ${users}\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">th:text</span>=<span class=\"hljs-string\">\"${user.id}\"</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">th:text</span>=<span class=\"hljs-string\">\"${user.name}\"</span>&gt;</span>张三<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">th:text</span>=<span class=\"hljs-string\">\"${user.userName}\"</span>&gt;</span>zhangsan<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">th:text</span>=<span class=\"hljs-string\">\"${user.age}\"</span>&gt;</span>20<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">th:text</span>=<span class=\"hljs-string\">\"${user.sex} == 1 ? '男': '女'\"</span>&gt;</span>男<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">th:text</span>=<span class=\"hljs-string\">\"${#dates.format(user.birthday, 'yyyy-MM-dd')}\"</span>&gt;</span>1980-02-30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">th:text</span>=<span class=\"hljs-string\">\"${user.note}\"</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>我们看到这里使用了以下语法：</p>\n<ul>\n<li><code>${}</code> ：这个类似与el表达式，但其实是ognl的语法，比el表达式更加强大</li>\n<li><code>th-</code>指令：<code>th-</code>是利用了Html5中的自定义属性来实现的。如果不支持H5，可以用<code>data-th-</code>来代替<ul>\n<li><code>th:each</code>：类似于<code>c:foreach</code>  遍历集合，但是语法更加简洁</li>\n<li><code>th:text</code>：声明标签中的文本<ul>\n<li>例如<code>&lt;td th-text=&#39;${user.id}&#39;&gt;1&lt;/td&gt;</code>，如果user.id有值，会覆盖默认的1</li>\n<li>如果没有值，则会显示td中默认的1。这正是thymeleaf能够动静结合的原因，模板解析失败不影响页面的显示效果，因为会显示默认值！</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-5-测试\"><a href=\"#6-5-测试\" class=\"headerlink\" title=\"6.5.测试\"></a>6.5.测试</h2><p>接下来，我们打开页面测试一下：</p>\n<p><img src=\"https://wytc.oss-cn-shanghai.aliyuncs.com/2019-03-05-133533.jpg\" alt=\"1525523911854\"></p>\n<h2 id=\"6-6-模板缓存\"><a href=\"#6-6-模板缓存\" class=\"headerlink\" title=\"6.6.模板缓存\"></a>6.6.模板缓存</h2><p>Thymeleaf会在第一次对模板解析之后进行缓存，极大的提高了并发处理能力。但是这给我们开发带来了不便，修改页面后并不会立刻看到效果，我们开发阶段可以关掉缓存使用：</p>\n\n    <pre><code class=\"lang-properties\"><span class=\"hljs-comment\"># 开发阶段关闭thymeleaf的模板缓存</span>\nspring.thymeleaf.<span class=\"hljs-attribute\">cache</span>=<span class=\"hljs-literal\">false</span>\n</code></pre>\n<p><strong>注意</strong>：</p>\n<p>​    在Idea中，我们需要在修改页面后按快捷键：<code>Ctrl + Shift + F9</code> 对项目进行rebuild才可以。</p>\n<p>​    eclipse中没有测试过。</p>\n<p>我们可以修改页面，测试一下。</p>\n","categories":[],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"springboot","path":"api/tags/springboot.json"}]}